# 2022-12-02

```elixir
Mix.install([
  {:kino, "~> 0.10.0"}
])
```

## Solution

```elixir
defmodule Advent do
  @moduledoc """
  Day 2: Rock Paper Scissors

  ## Examples

      iex> input = \"""
      ...> A Y
      ...> B X
      ...> C Z
      ...> \"""
      ...> Advent.sum_naive_scores(input)
      15
      iex> Advent.sum_correct_scores(input)
      12
  """

  def sum_naive_scores(input) do
    input
    |> String.split("\n", trim: true)
    |> Enum.map(&calculate_naive_score/1)
    |> Enum.sum()
  end

  def sum_correct_scores(input) do
    input
    |> String.split("\n", trim: true)
    |> Enum.map(&calculate_correct_score/1)
    |> Enum.sum()
  end

  defp calculate_naive_score(strategy) do
    case strategy do
      "A X" -> 1 + 3
      "A Y" -> 2 + 6
      "A Z" -> 3 + 0
      "B X" -> 1 + 0
      "B Y" -> 2 + 3
      "B Z" -> 3 + 6
      "C X" -> 1 + 6
      "C Y" -> 2 + 0
      "C Z" -> 3 + 3
    end
  end

  defp calculate_correct_score(strategy) do
    case strategy do
      "A X" -> 3 + 0
      "A Y" -> 1 + 3
      "A Z" -> 2 + 6
      "B X" -> 1 + 0
      "B Y" -> 2 + 3
      "B Z" -> 3 + 6
      "C X" -> 2 + 0
      "C Y" -> 3 + 3
      "C Z" -> 1 + 6
    end
  end
end
```

```elixir
file_input = Kino.Input.file("Input")
```

```elixir
value = Kino.Input.read(file_input)
path = Kino.Input.file_path(value.file_ref)
input = File.read!(path)

part_1 = Advent.sum_naive_scores(input)
part_2 = Advent.sum_correct_scores(input)

IO.puts("Part 1: #{part_1}")
IO.puts("Part 2: #{part_2}")
```
