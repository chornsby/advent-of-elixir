<!-- livebook:{"file_entries":[{"name":"day01.txt","type":"attachment"}]} -->

# 2022-12-01

```elixir
Mix.install([:kino])
```

## Solution

```elixir
defmodule Advent do
  @moduledoc """
  Day 1: Calorie Counting

  ## Examples

      iex> input = \"""
      ...> 1000
      ...> 2000
      ...> 3000
      ...> 
      ...> 4000
      ...> 
      ...> 5000
      ...> 6000
      ...> 
      ...> 7000
      ...> 8000
      ...> 9000
      ...> 
      ...> 10000
      ...> \"""
      ...> Advent.find_most_calories(input)
      24000
      iex> Advent.find_top_three_calories(input)
      45000
  """

  @doc """
  Return the largest total calories carried by a single elf.

  ## Examples 

      iex> input = Kino.FS.file_path("day01.txt") |> File.read!()
      ...> Advent.find_most_calories(input)
      67450
  """
  def find_most_calories(input) do
    input
    |> String.split("\n\n", trim: true)
    |> Enum.map(&sum_supplies/1)
    |> Enum.max()
  end

  @doc """
  Return the largest total calories carried by three elves.

  ## Examples

      iex> input = Kino.FS.file_path("day01.txt") |> File.read!()
      ...> Advent.find_top_three_calories(input)
      199357
  """
  def find_top_three_calories(input) do
    input
    |> String.split("\n\n", trim: true)
    |> Enum.map(&sum_supplies/1)
    |> Enum.sort(:desc)
    |> Enum.take(3)
    |> Enum.sum()
  end

  defp sum_supplies(supplies) do
    supplies
    |> String.split("\n", trim: true)
    |> Enum.map(&String.to_integer/1)
    |> Enum.sum()
  end
end
```
