<!-- livebook:{"file_entries":[{"name":"day05.txt","type":"attachment"}]} -->

# 2022-12-05

```elixir
Mix.install([:kino])
```

## Solution

```elixir
defmodule Advent do
  @moduledoc """
  Day 5: Supply Stacks

  ## Examples

      iex> input = \"""
      ...>     [D]    
      ...> [N] [C]    
      ...> [Z] [M] [P]
      ...>  1   2   3 
      ...> 
      ...> move 1 from 2 to 1
      ...> move 3 from 1 to 3
      ...> move 2 from 2 to 1
      ...> move 1 from 1 to 2
      ...> \"""
      iex> Advent.find_top_crates(input, :model9000)
      "CMZ"
      iex> Advent.find_top_crates(input, :model9001)
      "MCD"
  """

  alias Advent.Move
  alias Advent.State

  @doc """
  Find the crates at the top of each stack after all moves are applied.

  - The Crate Master 9000 `:model9000` moves one crate at a time
  - The Crate Master 9001 `:model9001` moves multiple crates at a time

  ## Examples

      iex> input = Kino.FS.file_path("day05.txt") |> File.read!()
      ...> Advent.find_top_crates(input, :model9000)
      "QMBMJDFTD"
      iex> Advent.find_top_crates(input, :model9001)
      "NBTVTJNFJ"
  """
  def find_top_crates(input, crane) when crane in [:model9000, :model9001] do
    [stacks, moves] = String.split(input, "\n\n", trim: true)

    state = State.parse(stacks)

    moves =
      moves
      |> String.split("\n", trim: true)
      |> Enum.map(&Move.parse/1)

    result = Enum.reduce(moves, state.stacks, &apply_move(&1, &2, crane))

    state.labels
    |> Enum.map(&Map.fetch!(result, &1))
    |> Enum.map(&List.first/1)
    |> Enum.join()
  end

  defp apply_move(move, stacks, crane) when crane in [:model9000, :model9001] do
    {items, remainder} =
      stacks
      |> Map.fetch!(move.from)
      |> Enum.split(move.number)

    items =
      case crane do
        :model9000 -> Enum.reverse(items)
        :model9001 -> items
      end

    stacks
    |> Map.update!(move.to, &(items ++ &1))
    |> Map.replace!(move.from, remainder)
  end

  defmodule Move do
    defstruct number: 0, from: "0", to: "0"

    def parse(text) when is_binary(text) do
      [number, from, to] =
        text
        |> String.split(" ")
        |> Enum.drop(1)
        |> Enum.take_every(2)

      number = String.to_integer(number)

      %Move{number: number, from: from, to: to}
    end
  end

  defmodule State do
    defstruct stacks: %{}, labels: []

    def parse(text) when is_binary(text) do
      label_to_stacks =
        text
        |> String.split("\n")
        |> Enum.map(fn line ->
          line
          |> String.graphemes()
          |> Enum.drop(1)
          |> Enum.take_every(4)
        end)
        |> Enum.zip()
        |> Enum.map(fn column ->
          {label, stack} =
            column
            |> Tuple.to_list()
            |> List.pop_at(-1)

          stack = Enum.reject(stack, &(&1 == " "))

          {label, stack}
        end)

      labels =
        label_to_stacks
        |> Enum.map(&elem(&1, 0))

      stacks = Map.new(label_to_stacks)

      %State{stacks: stacks, labels: labels}
    end
  end
end
```
